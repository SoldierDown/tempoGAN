TensorFlow 2.0 Upgrade Script
-----------------------------
Converted 26 files
Detected 39 issues that require attention
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
File: tensorflow/tools/GAN.py
--------------------------------------------------------------------------------
tensorflow/tools/GAN.py:104:17: ERROR: Using member tf.contrib.layers.batch_norm in deprecated module tf.contrib. tf.contrib.layers.batch_norm cannot be converted automatically. tf.contrib will not be distributed with TensorFlow 2.0, please consider an alternative in non-contrib TensorFlow, a community-maintained repository such as tensorflow/addons, or fork the required code.
tensorflow/tools/GAN.py:305:17: ERROR: Using member tf.contrib.layers.batch_norm in deprecated module tf.contrib. tf.contrib.layers.batch_norm cannot be converted automatically. tf.contrib will not be distributed with TensorFlow 2.0, please consider an alternative in non-contrib TensorFlow, a community-maintained repository such as tensorflow/addons, or fork the required code.
tensorflow/tools/GAN.py:361:6: WARNING: tf.get_variable requires manual check. tf.get_variable returns ResourceVariables by default in 2.0, which have well-defined semantics and are stricter about shapes. You can disable this behavior by passing use_resource=False, or by calling tf.compat.v1.disable_resource_variables().
tensorflow/tools/GAN.py:367:9: WARNING: tf.get_variable requires manual check. tf.get_variable returns ResourceVariables by default in 2.0, which have well-defined semantics and are stricter about shapes. You can disable this behavior by passing use_resource=False, or by calling tf.compat.v1.disable_resource_variables().
--------------------------------------------------------------------------------
File: tensorflow/tools/tilecreator_t.py
--------------------------------------------------------------------------------
tensorflow/tools/tilecreator_t.py:1051:3: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
tensorflow/tools/tilecreator_t.py:1054:4: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
tensorflow/tools/tilecreator_t.py:1126:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------
File: tensorflow/example2_liquid/tf_train.py
--------------------------------------------------------------------------------
tensorflow/example2_liquid/tf_train.py:230:13: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------
File: tensorflow/example2_liquid/manta_gendata.py
--------------------------------------------------------------------------------
tensorflow/example2_liquid/manta_gendata.py:147:17: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
tensorflow/example2_liquid/manta_gendata.py:247:4: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
tensorflow/example2_liquid/manta_gendata.py:248:4: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
tensorflow/example2_liquid/manta_gendata.py:249:4: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------
File: tensorflow/example2_liquid/tf_network.py
--------------------------------------------------------------------------------
tensorflow/example2_liquid/tf_network.py:34:11: WARNING: (Manual check required) upgrading tf.constant may require renaming or removing call arguments, but it was passed variable-length *args or **kwargs. The upgrade script cannot handle these automatically.
--------------------------------------------------------------------------------
File: tensorflow/tempoGAN/tempoGAN.py
--------------------------------------------------------------------------------
tensorflow/tempoGAN/tempoGAN.py:907:1: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------
File: tensorflow/datagen/gen_sim_3006.py
--------------------------------------------------------------------------------
tensorflow/datagen/gen_sim_3006.py:155:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
tensorflow/datagen/gen_sim_3006.py:156:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
tensorflow/datagen/gen_sim_3006.py:157:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
tensorflow/datagen/gen_sim_3006.py:158:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------
File: tensorflow/datagen/gen_sim_2006.py
--------------------------------------------------------------------------------
tensorflow/datagen/gen_sim_2006.py:128:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
tensorflow/datagen/gen_sim_2006.py:129:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
tensorflow/datagen/gen_sim_2006.py:130:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------
File: tensorflow/datagen/gen_sim_3dtraining.py
--------------------------------------------------------------------------------
tensorflow/datagen/gen_sim_3dtraining.py:441:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
tensorflow/datagen/gen_sim_3dtraining.py:442:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
tensorflow/datagen/gen_sim_3dtraining.py:444:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
tensorflow/datagen/gen_sim_3dtraining.py:446:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------
File: tensorflow/datagen/gen_sim_data.py
--------------------------------------------------------------------------------
tensorflow/datagen/gen_sim_data.py:452:3: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
tensorflow/datagen/gen_sim_data.py:453:3: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
tensorflow/datagen/gen_sim_data.py:456:3: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
tensorflow/datagen/gen_sim_data.py:457:3: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------
File: tensorflow/example1_smoke_tiled/tf_train.py
--------------------------------------------------------------------------------
tensorflow/example1_smoke_tiled/tf_train.py:258:4: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------
File: tensorflow/example1_smoke_tiled/tilecreator.py
--------------------------------------------------------------------------------
tensorflow/example1_smoke_tiled/tilecreator.py:155:1: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
tensorflow/example1_smoke_tiled/tilecreator.py:172:1: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------
File: tensorflow/example1_smoke_tiled/manta_genSimData.py
--------------------------------------------------------------------------------
tensorflow/example1_smoke_tiled/manta_genSimData.py:246:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
tensorflow/example1_smoke_tiled/manta_genSimData.py:247:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
tensorflow/example1_smoke_tiled/manta_genSimData.py:248:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------
File: tensorflow/example0_simple/manta_genSimSimple.py
--------------------------------------------------------------------------------
tensorflow/example0_simple/manta_genSimSimple.py:169:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
tensorflow/example0_simple/manta_genSimSimple.py:170:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------
File: tensorflow/example0_simple/tf_simple.py
--------------------------------------------------------------------------------
tensorflow/example0_simple/tf_simple.py:118:4: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
tensorflow/example0_simple/tf_simple.py:119:4: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
================================================================================
Detailed log follows:

================================================================================
================================================================================
Input tree: 'tensorflow'
================================================================================
--------------------------------------------------------------------------------
Processing file 'tensorflow/tools/paramhelpers.py'
 outputting to 'tensorflow_v2/tools/paramhelpers.py'
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/tools/fluiddataloader.py'
 outputting to 'tensorflow_v2/tools/fluiddataloader.py'
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/tools/uniio.py'
 outputting to 'tensorflow_v2/tools/uniio.py'
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/tools/GAN.py'
 outputting to 'tensorflow_v2/tools/GAN.py'
--------------------------------------------------------------------------------

21:20: INFO: Added keywords to args of function 'tf.shape'
67:10: INFO: Renamed 'tf.image.resize_images' to 'tf.image.resize'
80:7: INFO: Renamed 'tf.variable_scope' to 'tf.compat.v1.variable_scope'
104:17: ERROR: Using member tf.contrib.layers.batch_norm in deprecated module tf.contrib. tf.contrib.layers.batch_norm cannot be converted automatically. tf.contrib will not be distributed with TensorFlow 2.0, please consider an alternative in non-contrib TensorFlow, a community-maintained repository such as tensorflow/addons, or fork the required code.
104:97: INFO: Renamed 'tf.get_variable_scope' to 'tf.compat.v1.get_variable_scope'
148:16: INFO: Added keywords to args of function 'tf.nn.max_pool'
148:16: INFO: Renamed keyword argument for tf.nn.max_pool from value to input
148:16: INFO: Renamed 'tf.nn.max_pool' to 'tf.nn.max_pool2d'
158:16: INFO: Added keywords to args of function 'tf.nn.avg_pool'
158:16: INFO: Renamed keyword argument for tf.nn.avg_pool from value to input
158:16: INFO: Renamed 'tf.nn.avg_pool' to 'tf.nn.avg_pool2d'
184:7: INFO: Renamed 'tf.variable_scope' to 'tf.compat.v1.variable_scope'
239:16: INFO: Added keywords to args of function 'tf.transpose'
245:15: INFO: Renamed 'tf.image.resize_images' to 'tf.image.resize'
249:16: INFO: Added keywords to args of function 'tf.transpose'
252:16: INFO: Renamed 'tf.image.resize_images' to 'tf.image.resize'
265:7: INFO: Renamed 'tf.variable_scope' to 'tf.compat.v1.variable_scope'
305:17: ERROR: Using member tf.contrib.layers.batch_norm in deprecated module tf.contrib. tf.contrib.layers.batch_norm cannot be converted automatically. tf.contrib will not be distributed with TensorFlow 2.0, please consider an alternative in non-contrib TensorFlow, a community-maintained repository such as tensorflow/addons, or fork the required code.
305:97: INFO: Renamed 'tf.get_variable_scope' to 'tf.compat.v1.get_variable_scope'
320:8: INFO: Added keywords to args of function 'tf.shape'
323:10: INFO: Renamed 'tf.random_normal' to 'tf.random.normal'
342:15: INFO: Changing keep_prob arg of tf.nn.dropout to rate, and recomputing value.

361:6: WARNING: tf.get_variable requires manual check. tf.get_variable returns ResourceVariables by default in 2.0, which have well-defined semantics and are stricter about shapes. You can disable this behavior by passing use_resource=False, or by calling tf.compat.v1.disable_resource_variables().
361:6: INFO: Renamed 'tf.get_variable' to 'tf.compat.v1.get_variable'
361:51: INFO: tf.random_normal_initializer requires manual check. Initializers no longer have the dtype argument in the constructor or partition_info argument in the __call__ method.
The calls have been converted to compat.v1 for safety (even though they may already have been correct).
361:51: INFO: Renamed 'tf.random_normal_initializer' to 'tf.compat.v1.random_normal_initializer'
367:9: WARNING: tf.get_variable requires manual check. tf.get_variable returns ResourceVariables by default in 2.0, which have well-defined semantics and are stricter about shapes. You can disable this behavior by passing use_resource=False, or by calling tf.compat.v1.disable_resource_variables().
367:9: INFO: Renamed 'tf.get_variable' to 'tf.compat.v1.get_variable'
367:52: INFO: tf.constant_initializer requires manual check. Initializers no longer have the dtype argument in the constructor or partition_info argument in the __call__ method.
The calls have been converted to compat.v1 for safety (even though they may already have been correct).
367:52: INFO: Renamed 'tf.constant_initializer' to 'tf.compat.v1.constant_initializer'
375:9: INFO: Added keywords to args of function 'tf.nn.conv2d'
375:9: INFO: Renamed keyword argument for tf.nn.conv2d from filter to filters
405:7: INFO: `name` passed to `name_scope`. Because you may be re-entering an existing scope, it is not safe to convert automatically,  the v2 name_scope does not support re-entering scopes by name.

405:7: INFO: Renamed 'tf.name_scope' to 'tf.compat.v1.name_scope'
406:10: INFO: Added keywords to args of function 'tf.reduce_mean'
407:3: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
407:3: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
408:8: INFO: `name` passed to `name_scope`. Because you may be re-entering an existing scope, it is not safe to convert automatically,  the v2 name_scope does not support re-entering scopes by name.

408:8: INFO: Renamed 'tf.name_scope' to 'tf.compat.v1.name_scope'
409:21: INFO: Added keywords to args of function 'tf.reduce_sum'
410:3: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
410:3: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
411:3: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
411:3: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
411:36: INFO: Added keywords to args of function 'tf.reduce_max'
412:3: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
412:3: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
412:36: INFO: Added keywords to args of function 'tf.reduce_min'
413:3: INFO: tf.summary.histogram requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
413:3: INFO: Renamed 'tf.summary.histogram' to 'tf.compat.v1.summary.histogram'
418:9: INFO: Renamed 'tf.variable_scope' to 'tf.compat.v1.variable_scope'
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/tools/tc_test.py'
 outputting to 'tensorflow_v2/tools/tc_test.py'
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/tools/tilecreator_t.py'
 outputting to 'tensorflow_v2/tools/tilecreator_t.py'
--------------------------------------------------------------------------------

1051:3: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
1054:4: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
1126:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/example2_liquid/tf_train.py'
 outputting to 'tensorflow_v2/example2_liquid/tf_train.py'
--------------------------------------------------------------------------------

78:7: INFO: Renamed 'tf.InteractiveSession' to 'tf.compat.v1.InteractiveSession'
88:13: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
89:13: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
90:13: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
99:5: INFO: `name` passed to `name_scope`. Because you may be re-entering an existing scope, it is not safe to convert automatically,  the v2 name_scope does not support re-entering scopes by name.

99:5: INFO: Renamed 'tf.name_scope' to 'tf.compat.v1.name_scope'
100:6: INFO: `name` passed to `name_scope`. Because you may be re-entering an existing scope, it is not safe to convert automatically,  the v2 name_scope does not support re-entering scopes by name.

100:6: INFO: Renamed 'tf.name_scope' to 'tf.compat.v1.name_scope'
102:32: INFO: Added keywords to args of function 'tf.argmax'
102:50: INFO: Added keywords to args of function 'tf.argmax'
105:23: INFO: Added keywords to args of function 'tf.reduce_mean'
109:24: INFO: Added keywords to args of function 'tf.reduce_sum'
110:32: INFO: Added keywords to args of function 'tf.shape'
111:24: INFO: Renamed 'tf.logical_xor' to 'tf.math.logical_xor'
112:24: INFO: Added keywords to args of function 'tf.reduce_sum'
113:24: INFO: Added keywords to args of function 'tf.reduce_sum'
120:51: INFO: Added keywords to args of function 'tf.reduce_mean'
121:51: INFO: Added keywords to args of function 'tf.reduce_mean'
123:6: INFO: `name` passed to `name_scope`. Because you may be re-entering an existing scope, it is not safe to convert automatically,  the v2 name_scope does not support re-entering scopes by name.

123:6: INFO: Renamed 'tf.name_scope' to 'tf.compat.v1.name_scope'
124:32: INFO: Added keywords to args of function 'tf.shape'
126:7: INFO: `name` passed to `name_scope`. Because you may be re-entering an existing scope, it is not safe to convert automatically,  the v2 name_scope does not support re-entering scopes by name.

126:7: INFO: Renamed 'tf.name_scope' to 'tf.compat.v1.name_scope'
128:36: INFO: Added keywords to args of function 'tf.reduce_mean'
128:51: INFO: Changing labels arg of tf.nn.softmax_cross_entropy_with_logits to tf.stop_gradient(labels). Please check this transformation.

131:7: INFO: `name` passed to `name_scope`. Because you may be re-entering an existing scope, it is not safe to convert automatically,  the v2 name_scope does not support re-entering scopes by name.

131:7: INFO: Renamed 'tf.name_scope' to 'tf.compat.v1.name_scope'
135:28: INFO: Added keywords to args of function 'tf.reduce_sum'
135:79: INFO: Added keywords to args of function 'tf.reduce_sum'
135:93: INFO: Renamed 'tf.log' to 'tf.math.log'
145:20: INFO: Renamed 'tf.get_collection' to 'tf.compat.v1.get_collection'
145:38: INFO: Renamed 'tf.GraphKeys' to 'tf.compat.v1.GraphKeys'
146:20: INFO: Renamed 'tf.get_collection' to 'tf.compat.v1.get_collection'
146:38: INFO: Renamed 'tf.GraphKeys' to 'tf.compat.v1.GraphKeys'
157:21: INFO: Renamed 'tf.get_collection' to 'tf.compat.v1.get_collection'
157:39: INFO: Renamed 'tf.GraphKeys' to 'tf.compat.v1.GraphKeys'
164:2: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
164:2: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
166:5: INFO: `name` passed to `name_scope`. Because you may be re-entering an existing scope, it is not safe to convert automatically,  the v2 name_scope does not support re-entering scopes by name.

166:5: INFO: Renamed 'tf.name_scope' to 'tf.compat.v1.name_scope'
167:14: INFO: Renamed 'tf.train.AdamOptimizer' to 'tf.compat.v1.train.AdamOptimizer'
168:32: INFO: Renamed 'tf.train.AdamOptimizer' to 'tf.compat.v1.train.AdamOptimizer'
170:9: INFO: tf.summary.merge_all requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
170:9: INFO: Renamed 'tf.summary.merge_all' to 'tf.compat.v1.summary.merge_all'
171:15: INFO: tf.summary.FileWriter requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
171:15: INFO: Renamed 'tf.summary.FileWriter' to 'tf.compat.v1.summary.FileWriter'
172:15: INFO: tf.summary.FileWriter requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
172:15: INFO: Renamed 'tf.summary.FileWriter' to 'tf.compat.v1.summary.FileWriter'
174:8: INFO: Renamed 'tf.train.Saver' to 'tf.compat.v1.train.Saver'
175:0: INFO: Renamed 'tf.global_variables_initializer' to 'tf.compat.v1.global_variables_initializer'
209:18: INFO: Renamed 'tf.RunMetadata' to 'tf.compat.v1.RunMetadata'
210:34: INFO: Renamed 'tf.RunOptions' to 'tf.compat.v1.RunOptions'
210:60: INFO: Renamed 'tf.RunOptions' to 'tf.compat.v1.RunOptions'
230:13: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/example2_liquid/manta_gendata.py'
 outputting to 'tensorflow_v2/example2_liquid/manta_gendata.py'
--------------------------------------------------------------------------------

147:17: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
247:4: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
248:4: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
249:4: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/example2_liquid/tf_network.py'
 outputting to 'tensorflow_v2/example2_liquid/tf_network.py'
--------------------------------------------------------------------------------

16:0: INFO: Renamed 'tf.set_random_seed' to 'tf.compat.v1.set_random_seed'
28:11: INFO: Renamed 'tf.truncated_normal' to 'tf.random.truncated_normal'
34:11: WARNING: (Manual check required) upgrading tf.constant may require renaming or removing call arguments, but it was passed variable-length *args or **kwargs. The upgrade script cannot handle these automatically.
39:6: INFO: `name` passed to `name_scope`. Because you may be re-entering an existing scope, it is not safe to convert automatically,  the v2 name_scope does not support re-entering scopes by name.

39:6: INFO: Renamed 'tf.name_scope' to 'tf.compat.v1.name_scope'
40:9: INFO: Added keywords to args of function 'tf.reduce_mean'
41:2: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
41:2: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
42:7: INFO: `name` passed to `name_scope`. Because you may be re-entering an existing scope, it is not safe to convert automatically,  the v2 name_scope does not support re-entering scopes by name.

42:7: INFO: Renamed 'tf.name_scope' to 'tf.compat.v1.name_scope'
43:20: INFO: Added keywords to args of function 'tf.reduce_sum'
45:2: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
45:2: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
46:2: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
46:2: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
46:47: INFO: Added keywords to args of function 'tf.reduce_max'
47:2: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
47:2: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
47:47: INFO: Added keywords to args of function 'tf.reduce_min'
48:2: INFO: tf.summary.histogram requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
48:2: INFO: Renamed 'tf.summary.histogram' to 'tf.compat.v1.summary.histogram'
52:6: INFO: `name` passed to `name_scope`. Because you may be re-entering an existing scope, it is not safe to convert automatically,  the v2 name_scope does not support re-entering scopes by name.

52:6: INFO: Renamed 'tf.name_scope' to 'tf.compat.v1.name_scope'
53:7: INFO: `name` passed to `name_scope`. Because you may be re-entering an existing scope, it is not safe to convert automatically,  the v2 name_scope does not support re-entering scopes by name.

53:7: INFO: Renamed 'tf.name_scope' to 'tf.compat.v1.name_scope'
56:7: INFO: `name` passed to `name_scope`. Because you may be re-entering an existing scope, it is not safe to convert automatically,  the v2 name_scope does not support re-entering scopes by name.

56:7: INFO: Renamed 'tf.name_scope' to 'tf.compat.v1.name_scope'
59:7: INFO: `name` passed to `name_scope`. Because you may be re-entering an existing scope, it is not safe to convert automatically,  the v2 name_scope does not support re-entering scopes by name.

59:7: INFO: Renamed 'tf.name_scope' to 'tf.compat.v1.name_scope'
63:76: INFO: Changing keep_prob arg of tf.nn.dropout to rate, and recomputing value.

69:21: INFO: Added keywords to args of function 'tf.nn.moments'
70:21: INFO: Renamed 'tf.assign' to 'tf.compat.v1.assign'
71:21: INFO: Renamed 'tf.assign' to 'tf.compat.v1.assign'
82:76: INFO: Changing keep_prob arg of tf.nn.dropout to rate, and recomputing value.

84:3: INFO: tf.summary.histogram requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
84:3: INFO: Renamed 'tf.summary.histogram' to 'tf.compat.v1.summary.histogram'
87:2: INFO: tf.summary.histogram requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
87:2: INFO: Renamed 'tf.summary.histogram' to 'tf.compat.v1.summary.histogram'
92:6: INFO: `name` passed to `name_scope`. Because you may be re-entering an existing scope, it is not safe to convert automatically,  the v2 name_scope does not support re-entering scopes by name.

92:6: INFO: Renamed 'tf.name_scope' to 'tf.compat.v1.name_scope'
93:7: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
94:7: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/example2_liquid/tf_datasets.py'
 outputting to 'tensorflow_v2/example2_liquid/tf_datasets.py'
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/example2_liquid/manta_mlflip.py'
 outputting to 'tensorflow_v2/example2_liquid/manta_mlflip.py'
--------------------------------------------------------------------------------

51:10: INFO: Renamed 'tf.InteractiveSession' to 'tf.compat.v1.InteractiveSession'
58:10: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
64:11: INFO: Renamed 'tf.train.Saver' to 'tf.compat.v1.train.Saver'
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/example2_liquid/manta_flip.py'
 outputting to 'tensorflow_v2/example2_liquid/manta_flip.py'
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/tempoGAN/example_run_training.py'
 outputting to 'tensorflow_v2/tempoGAN/example_run_training.py'
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/tempoGAN/tempoGAN.py'
 outputting to 'tensorflow_v2/tempoGAN/tempoGAN.py'
--------------------------------------------------------------------------------

188:0: INFO: Renamed 'tf.set_random_seed' to 'tf.compat.v1.set_random_seed'
239:4: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
241:9: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
243:4: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
244:5: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
245:6: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
246:6: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
247:7: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
249:12: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
278:6: INFO: Renamed 'tf.variable_scope' to 'tf.compat.v1.variable_scope'
309:6: INFO: Renamed 'tf.variable_scope' to 'tf.compat.v1.variable_scope'
311:11: INFO: Added keywords to args of function 'tf.shape'
319:11: INFO: Added keywords to args of function 'tf.shape'
352:6: INFO: Renamed 'tf.variable_scope' to 'tf.compat.v1.variable_scope'
383:6: INFO: Renamed 'tf.variable_scope' to 'tf.compat.v1.variable_scope'
402:6: INFO: Renamed 'tf.variable_scope' to 'tf.compat.v1.variable_scope'
404:11: INFO: Added keywords to args of function 'tf.shape'
411:11: INFO: Added keywords to args of function 'tf.shape'
442:8: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
462:6: INFO: `name` passed to `name_scope`. Because you may be re-entering an existing scope, it is not safe to convert automatically,  the v2 name_scope does not support re-entering scopes by name.

462:6: INFO: Renamed 'tf.name_scope' to 'tf.compat.v1.name_scope'
485:4: INFO: Renamed 'tf.where' to 'tf.compat.v1.where'
490:14: INFO: Added keywords to args of function 'tf.reduce_prod'
490:48: INFO: Renamed keyword argument for tf.reduce_prod from keep_dims to keepdims
505:17: INFO: Added keywords to args of function 'tf.reduce_mean'
506:16: INFO: Added keywords to args of function 'tf.reduce_mean'
509:19: INFO: Added keywords to args of function 'tf.reduce_mean'
511:18: INFO: Added keywords to args of function 'tf.reduce_mean'
512:26: INFO: Added keywords to args of function 'tf.reduce_mean'
512:75: INFO: Added keywords to args of function 'tf.reduce_mean'
512:124: INFO: Added keywords to args of function 'tf.reduce_mean'
512:173: INFO: Added keywords to args of function 'tf.reduce_mean'
515:13: INFO: Added keywords to args of function 'tf.reduce_mean'
523:15: INFO: Added keywords to args of function 'tf.reduce_mean'
532:18: INFO: tf.train.polynomial_decay requires manual check. To use learning rate decay schedules with TensorFlow 2.0, switch to the schedules in `tf.keras.optimizers.schedules`.

532:18: INFO: Renamed 'tf.train.polynomial_decay' to 'tf.compat.v1.train.polynomial_decay'
534:14: INFO: Renamed 'tf.get_collection' to 'tf.compat.v1.get_collection'
534:32: INFO: Renamed 'tf.GraphKeys' to 'tf.compat.v1.GraphKeys'
539:8: INFO: Renamed 'tf.trainable_variables' to 'tf.compat.v1.trainable_variables'
555:9: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
558:11: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
569:15: INFO: Added keywords to args of function 'tf.transpose'
572:16: INFO: Renamed 'tf.get_collection' to 'tf.compat.v1.get_collection'
572:34: INFO: Renamed 'tf.GraphKeys' to 'tf.compat.v1.GraphKeys'
578:17: INFO: Added keywords to args of function 'tf.reduce_mean'
580:32: INFO: Added keywords to args of function 'tf.reduce_mean'
585:9: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
595:10: INFO: Added keywords to args of function 'tf.transpose'
599:16: INFO: Renamed 'tf.get_collection' to 'tf.compat.v1.get_collection'
599:34: INFO: Renamed 'tf.GraphKeys' to 'tf.compat.v1.GraphKeys'
613:16: INFO: Renamed 'tf.get_collection' to 'tf.compat.v1.get_collection'
613:34: INFO: Renamed 'tf.GraphKeys' to 'tf.compat.v1.GraphKeys'
618:20: INFO: Added keywords to args of function 'tf.reduce_mean'
619:19: INFO: Added keywords to args of function 'tf.reduce_mean'
620:10: INFO: Renamed 'tf.trainable_variables' to 'tf.compat.v1.trainable_variables'
623:22: INFO: Added keywords to args of function 'tf.reduce_mean'
626:21: INFO: Added keywords to args of function 'tf.reduce_mean'
630:16: INFO: Added keywords to args of function 'tf.reduce_mean'
635:23: INFO: Renamed 'tf.train.AdamOptimizer' to 'tf.compat.v1.train.AdamOptimizer'
639:24: INFO: Renamed 'tf.train.AdamOptimizer' to 'tf.compat.v1.train.AdamOptimizer'
643:25: INFO: Renamed 'tf.train.AdamOptimizer' to 'tf.compat.v1.train.AdamOptimizer'
648:18: INFO: Renamed 'tf.train.AdamOptimizer' to 'tf.compat.v1.train.AdamOptimizer'
651:9: INFO: Renamed 'tf.ConfigProto' to 'tf.compat.v1.ConfigProto'
652:7: INFO: Renamed 'tf.InteractiveSession' to 'tf.compat.v1.InteractiveSession'
653:8: INFO: Renamed 'tf.train.Saver' to 'tf.compat.v1.train.Saver'
657:10: INFO: Renamed 'tf.global_variables_initializer' to 'tf.compat.v1.global_variables_initializer'
666:20: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
666:20: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
667:19: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
667:19: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
671:25: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
671:25: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
672:24: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
672:24: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
673:18: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
673:18: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
674:19: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
674:19: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
678:23: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
678:23: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
679:22: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
679:22: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
683:22: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
683:22: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
684:21: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
684:21: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
688:21: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
688:21: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
689:20: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
689:20: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
692:25: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
692:25: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
693:24: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
693:24: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
694:20: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
694:20: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
695:19: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
695:19: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
698:25: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
698:25: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
700:24: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
700:24: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
703:24: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
703:24: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
705:23: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
705:23: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
708:22: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
708:22: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
709:21: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
709:21: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
711:21: INFO: tf.summary.merge_all requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
711:21: INFO: Renamed 'tf.summary.merge_all' to 'tf.compat.v1.summary.merge_all'
712:21: INFO: tf.summary.FileWriter requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
712:21: INFO: Renamed 'tf.summary.FileWriter' to 'tf.compat.v1.summary.FileWriter'
907:1: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
982:18: INFO: Renamed 'tf.RunOptions' to 'tf.compat.v1.RunOptions'
982:44: INFO: Renamed 'tf.RunOptions' to 'tf.compat.v1.RunOptions'
983:19: INFO: Renamed 'tf.RunMetadata' to 'tf.compat.v1.RunMetadata'
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/tempoGAN/example_run_output.py'
 outputting to 'tensorflow_v2/tempoGAN/example_run_output.py'
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/datagen/gen_sim_3006.py'
 outputting to 'tensorflow_v2/datagen/gen_sim_3006.py'
--------------------------------------------------------------------------------

155:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
156:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
157:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
158:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/datagen/gen_sim_2006.py'
 outputting to 'tensorflow_v2/datagen/gen_sim_2006.py'
--------------------------------------------------------------------------------

128:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
129:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
130:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/datagen/gen_sim_3dtraining.py'
 outputting to 'tensorflow_v2/datagen/gen_sim_3dtraining.py'
--------------------------------------------------------------------------------

441:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
442:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
444:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
446:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/datagen/gen_sim_data.py'
 outputting to 'tensorflow_v2/datagen/gen_sim_data.py'
--------------------------------------------------------------------------------

452:3: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
453:3: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
456:3: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
457:3: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/example1_smoke_tiled/tf_train.py'
 outputting to 'tensorflow_v2/example1_smoke_tiled/tf_train.py'
--------------------------------------------------------------------------------

99:0: INFO: Renamed 'tf.set_random_seed' to 'tf.compat.v1.set_random_seed'
188:9: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
189:9: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
190:11: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
194:26: INFO: Renamed 'tf.random_normal' to 'tf.random.normal'
195:26: INFO: Renamed 'tf.random_normal' to 'tf.random.normal'
199:6: INFO: Renamed 'tf.layers.dropout' to 'tf.compat.v1.layers.dropout'
201:28: INFO: Renamed 'tf.random_normal' to 'tf.random.normal'
202:28: INFO: Renamed 'tf.random_normal' to 'tf.random.normal'
208:12: INFO: Renamed 'tf.train.AdamOptimizer' to 'tf.compat.v1.train.AdamOptimizer'
211:7: INFO: Renamed 'tf.InteractiveSession' to 'tf.compat.v1.InteractiveSession'
212:8: INFO: Renamed 'tf.train.Saver' to 'tf.compat.v1.train.Saver'
216:10: INFO: Renamed 'tf.global_variables_initializer' to 'tf.compat.v1.global_variables_initializer'
232:13: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
232:13: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
233:13: INFO: tf.summary.scalar requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
233:13: INFO: Renamed 'tf.summary.scalar' to 'tf.compat.v1.summary.scalar'
234:20: INFO: tf.summary.merge_all requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
234:20: INFO: Renamed 'tf.summary.merge_all' to 'tf.compat.v1.summary.merge_all'
235:20: INFO: tf.summary.FileWriter requires manual check. The TF 1.x summary API cannot be automatically migrated to TF 2.0, so symbols have been converted to tf.compat.v1.summary.* and must be migrated manually. Typical usage will only require changes to the summary writing logic, not to individual calls like scalar(). For examples of the new summary API, see the Effective TF 2.0 migration document or check the TF 2.0 TensorBoard tutorials.
235:20: INFO: Renamed 'tf.summary.FileWriter' to 'tf.compat.v1.summary.FileWriter'
258:4: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/example1_smoke_tiled/tilecreator.py'
 outputting to 'tensorflow_v2/example1_smoke_tiled/tilecreator.py'
--------------------------------------------------------------------------------

155:1: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
172:1: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/example1_smoke_tiled/tf_genManySims.py'
 outputting to 'tensorflow_v2/example1_smoke_tiled/tf_genManySims.py'
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/example1_smoke_tiled/manta_genSimData.py'
 outputting to 'tensorflow_v2/example1_smoke_tiled/manta_genSimData.py'
--------------------------------------------------------------------------------

246:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
247:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
248:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/example1_smoke_tiled/tf_train_keras.py'
 outputting to 'tensorflow_v2/example1_smoke_tiled/tf_train_keras.py'
--------------------------------------------------------------------------------

101:0: INFO: Renamed 'tf.set_random_seed' to 'tf.compat.v1.set_random_seed'
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/example0_simple/manta_genSimSimple.py'
 outputting to 'tensorflow_v2/example0_simple/manta_genSimSimple.py'
--------------------------------------------------------------------------------

169:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
170:2: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Processing file 'tensorflow/example0_simple/tf_simple.py'
 outputting to 'tensorflow_v2/example0_simple/tf_simple.py'
--------------------------------------------------------------------------------

26:0: INFO: Renamed 'tf.set_random_seed' to 'tf.compat.v1.set_random_seed'
71:4: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
72:4: INFO: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'
75:20: INFO: Renamed 'tf.random_normal' to 'tf.random.normal'
76:22: INFO: Renamed 'tf.random_normal' to 'tf.random.normal'
80:6: INFO: Changing keep_prob arg of tf.nn.dropout to rate, and recomputing value.

82:20: INFO: Renamed 'tf.random_normal' to 'tf.random.normal'
83:20: INFO: Renamed 'tf.random_normal' to 'tf.random.normal'
89:7: INFO: Renamed 'tf.train.AdamOptimizer' to 'tf.compat.v1.train.AdamOptimizer'
96:7: INFO: Renamed 'tf.InteractiveSession' to 'tf.compat.v1.InteractiveSession'
97:9: INFO: Renamed 'tf.global_variables_initializer' to 'tf.compat.v1.global_variables_initializer'
118:4: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
119:4: WARNING: *.save requires manual check. (This warning is only applicable if the code saves a tf.Keras model) Keras model.save now saves to the Tensorflow SavedModel format by default, instead of HDF5. To continue saving to HDF5, add the argument save_format='h5' to the save() function.
--------------------------------------------------------------------------------

